--DROP TABLE IF EXISTS likes;
--DROP TABLE IF EXISTS friends;
--DROP TABLE IF EXISTS film_genre;
--DROP TABLE IF EXISTS users;
--DROP TABLE IF EXISTS mpa CASCADE;
--DROP TABLE IF EXISTS films CASCADE;
--DROP TABLE IF EXISTS genres CASCADE;






CREATE TABLE IF NOT EXISTS mpa
(
    mpa_id  INTEGER             GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name    VARCHAR(20)         UNIQUE
);

CREATE TABLE IF NOT EXISTS films
(
    film_id      INTEGER        GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         VARCHAR(100)   NOT NULL,
    description  VARCHAR(200),
    release_date Date           NOT NULL,
    duration     INTEGER        NOT NULL,
    mpa_id       INTEGER        REFERENCES mpa(mpa_id)
);

CREATE TABLE IF NOT EXISTS users
(
    user_id  INTEGER            GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR(50)        NOT NULL,
    login    VARCHAR(50)        NOT NULL,
    name     VARCHAR(100),
    birthday DATE
);

CREATE TABLE IF NOT EXISTS genres
(
	genre_id 	INTEGER         GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name 		VARCHAR(50)     UNIQUE
);

CREATE TABLE IF NOT EXISTS friends
(
	user_id 	INTEGER         REFERENCES users(user_id)   ON DELETE CASCADE,
	friend_id 	INTEGER         REFERENCES users(user_id)   ON DELETE CASCADE,
    status      BOOLEAN         DEFAULT FALSE,
                                PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS likes
(
	film_id 	INTEGER         REFERENCES films(film_id)   ON DELETE CASCADE,
	user_id 	INTEGER         REFERENCES users(user_id)   ON DELETE CASCADE,
	                            PRIMARY KEY (film_id, user_id)
);

CREATE TABLE IF NOT EXISTS film_genre
(
	genre_id 	INTEGER     REFERENCES genres(genre_id)     ON DELETE CASCADE,
	film_id 	INTEGER     REFERENCES films(film_id)       ON DELETE CASCADE,
	                        PRIMARY KEY (film_id, genre_id)
);